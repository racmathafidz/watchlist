import { useRouter } from 'next/router'
import Head from 'next/head'

import Layout from '../../components/layout'
import DetailOverview from '../../components/detailOverview'
import DetailVideos from '../../components/detailVideos'
import DetailCast from '../../components/detailCast'
import SeasonList from '../../components/tvSeasonList'
import MoreDetail from '../../components/moreDetail'
import DetailSimilar from '../../components/detailSimilar'

export default function TvDetail(props) {

    const router = useRouter()

    const { tvDetailData, tvVideoData, tvCreditData, tvSimilarData } = props    

    if (router.isFallback) {
        return (
            <>
                <Head>
                  <title>Watchlist</title>
                  <meta name="description" content="Generated by create next app" />
                  <link rel="icon" href="/favicon.ico" />
                </Head>
                
                <div className="flex h-screen w-full items-center justify-center">
                    <h1 className="text-7xl font-medium text-center text-red-700 animate-bounce">W</h1>                
                </div>
            </>
        )
    }

    return (
        <Layout title={`${tvDetailData.name} | Watchlist`}>
            <main>
                <DetailOverview detailData={tvDetailData} detailTv />
                <DetailVideos videoData={tvVideoData}/> 
                <DetailCast castData={tvCreditData}/>            
                <SeasonList detailData={tvDetailData.seasons}/>
                <MoreDetail detailData={tvDetailData} tvShows />
                <DetailSimilar similarData={tvSimilarData} tvShows />
            </main>
        </Layout>
    )
}

// export const getStaticPaths = async () => {
//     const tvTrendingRes = await fetch(`https://api.themoviedb.org/3/trending/tv/day?api_key=${process.env.API_KEY}`)
//     const tvTrending = await tvTrendingRes.json()

//     const tvPopularRes = await fetch(`https://api.themoviedb.org/3/tv/popular?api_key=${process.env.API_KEY}&language=en-US&page=1`)
//     const tvPopular = await tvPopularRes.json()

//     const tvAiringRes = await fetch(`https://api.themoviedb.org/3/tv/on_the_air?api_key=${process.env.API_KEY}&language=en-US&page=1`)
//     const tvAiring = await tvAiringRes.json()
     
//     const actionDataRes = await fetch(`https://api.themoviedb.org/3/discover/tv?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10759&include_null_first_air_dates=false&with_watch_monetization_types=flatrate`)
//     const actionData = await actionDataRes.json()

//     const comedyDataRes = await fetch(`https://api.themoviedb.org/3/discover/tv?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=35&include_null_first_air_dates=false&with_watch_monetization_types=flatrate`)
//     const comedyData = await comedyDataRes.json()

//     const dramaDataRes = await fetch(`https://api.themoviedb.org/3/discover/tv?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=18&include_null_first_air_dates=false&with_watch_monetization_types=flatrate`)
//     const dramaData = await dramaDataRes.json()

//     const animationDataRes = await fetch(`https://api.themoviedb.org/3/discover/tv?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=16&include_null_first_air_dates=false&with_watch_monetization_types=flatrate`)
//     const animationData = await animationDataRes.json()

//     const data = [
//         ...tvTrending.results,
//         ...tvPopular.results,
//         ...tvAiring.results,
//         ...actionData.results,
//         ...comedyData.results,
//         ...dramaData.results,
//         ...animationData.results
//     ]

//     const paths = data.map( items => {
//         return {
//             params: {
//                 id: items.id.toString()
//             }
//         }
//     })

//     return {
//         paths,
//         fallback: true
//     }
// }

export const getServerSideProps = async (paths) => {
    const id = paths.params.id

    const tvDetailDataRes = await fetch(`https://api.themoviedb.org/3/tv/${id}?api_key=${process.env.API_KEY}&language=en-US`)
    const tvDetailData = await tvDetailDataRes.json()

    const tvVideoRes = await fetch(`https://api.themoviedb.org/3/tv/${id}/videos?api_key=${process.env.API_KEY}&language=en-US`)
    const tvVideoData = await tvVideoRes.json()
    const filteredTvVideoData = await tvVideoData.results.filter( items => {
        return items.site === "YouTube"
    })

    const tvCreditRes = await fetch(`https://api.themoviedb.org/3/tv/${id}/credits?api_key=${process.env.API_KEY}&language=en-US`)
    const tvCreditData = await tvCreditRes.json()
    const filteredTvCreditData = await tvCreditData.cast.filter( items => {
        return items.known_for_department === "Acting" && items.profile_path !== null
    })

    const tvSimilarRes = await fetch(`https://api.themoviedb.org/3/tv/${id}/similar?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const tvSimilarData = await tvSimilarRes.json()
    const filteredTvSimilarData = await tvSimilarData.results.filter( items => {
        return items.backdrop_path !== null && items.poster_path !== null
    })

    const tvRecomendationRes = await fetch(`https://api.themoviedb.org/3/tv/${id}/recommendations?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const tvRecomendationData = await tvRecomendationRes.json()
    const filteredTvRecomendationData = await tvRecomendationData.results.filter( items => {
        return items.backdrop_path !== null && items.poster_path !== null
    })

    const similarAndRecomendationData = [
        ...filteredTvRecomendationData,
        ...filteredTvSimilarData
    ]

    return {
        props: {
            tvDetailData: tvDetailData,
            tvVideoData: filteredTvVideoData,
            tvCreditData: filteredTvCreditData,
            tvSimilarData: similarAndRecomendationData
        }
        //revalidate: 1
    }
}
