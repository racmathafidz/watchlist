import { useRouter } from 'next/router'
import Head from 'next/head'

import Layout from '../../components/layout'
import durationFormat from '../../utils/durationFormat'

export default function MovieDetail({ movieDetailData }) {

    const router = useRouter()

    if (router.isFallback) {        
        return (
            <>
                <Head>
                  <title>Watchlist</title>
                  <meta name="description" content="Generated by create next app" />
                  <link rel="icon" href="/favicon.ico" />
                </Head>

                <div className="flex h-screen w-full items-center justify-center">
                    <h1 className="text-7xl font-medium text-center text-red-700 animate-bounce">W</h1>                
                </div>
            </>
        )
    }

    return (
        <Layout title={`${movieDetailData.title} | Watchlist`}>
            <main>
                <div className="w-full h-full sm:h-96 lg:h-120 xl:h-140">                
                    <img 
                        className="w-full sm:w-96 lg:w-128 xl:w-180 h-full sm:h-96 lg:h-120 xl:h-140 sm:object-center sm:object-cover sm:z-0 bg-gradient-to-t from-red-500"
                        src={`https://image.tmdb.org/t/p/original/${movieDetailData.backdrop_path}`} 
                        alt="Backdrop" 
                        align="right"
                    />            
                    <div className="flex flex-col w-full content-center justify-start px-3 sm:px-5 xl:px-8 sm:z-10 sm:absolute h-full sm:h-96 lg:h-120 xl:h-140 sm:bg-gradient-to-r sm:from-black sm:via-black">
                        <div className="my-auto xl:pb-20 sm:w-1/2">
                            <h1 className="text-3xl sm:text-4xl lg:text-5xl mb-4 mt-4 sm:mt-0 font-medium">{movieDetailData.title}</h1>
                            <p className="sm:text-sm lg:text-base mb-4 text-justify font-light font-description">{movieDetailData.overview}</p>
                            <p 
                                className="sm:text-sm lg:text-base mb-4 font-light font-description"
                            >
                                {movieDetailData.release_date.substring(0,4)} | {durationFormat(movieDetailData.runtime)} | &nbsp;
                                {movieDetailData.genres.map( (items, index) => {
                                    if (index === movieDetailData.genres.length -1) {
                                        return items.name    
                                    }
                                    return items.name+", "
                                })}
                            </p>
                        </div>
                    </div>
                </div>
            </main>
        </Layout>
    )
}

export const getStaticPaths = async () => {
    const movieInTheaterRes = await fetch(`https://api.themoviedb.org/3/movie/now_playing?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const movieInTheater = await movieInTheaterRes.json()

    const movieTrendingRes = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${process.env.API_KEY}`)
    const movieTrending = await movieTrendingRes.json()

    const moviePopularRes = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const moviePopular = await moviePopularRes.json()

    const actionDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=28&with_watch_monetization_types=flatrate`)
    const actionData = await actionDataRes.json()

    const comedyDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=35&with_watch_monetization_types=flatrate`)
    const comedyData = await comedyDataRes.json()

    const horrorDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=27&with_watch_monetization_types=flatrate`)
    const horrorData = await horrorDataRes.json()

    const romanceDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=10749&with_watch_monetization_types=flatrate`)
    const romanceData = await romanceDataRes.json()

    const data = [
        ...movieInTheater.results,
        ...movieTrending.results,
        ...moviePopular.results,
        ...actionData.results,
        ...comedyData.results,
        ...horrorData.results,
        ...romanceData.results
    ]

    const paths = data.map( items => {
        return {
            params: {
                id: items.id.toString()
            }
        }
    })

    return {
        paths,
        fallback: true
    }
}

export const getStaticProps = async (paths) => {
    const id = paths.params.id
    const res = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.API_KEY}&language=en-US`)
    const data = await res.json()

    return {
        props: {
            movieDetailData: data
        },
        revalidate: 1
    }
}
