import { useRouter } from 'next/router'
import Head from 'next/head'

import Layout from '../../components/layout'
import DetailOverview from '../../components/detailOverview'
import DetailVideos from '../../components/detailVideos'
import DetailCast from '../../components/detailCast'
import MoreDetail from '../../components/moreDetail'
import DetailSimilar from '../../components/detailSimilar'

export default function MovieDetail(props) {

    const router = useRouter()

    const { movieDetailData, movieVideoData, movieCreditData, movieSimilarData } = props    

    if (router.isFallback) {        
        return (
            <>
                <Head>
                  <title>Watchlist</title>
                  <meta name="description" content="Generated by create next app" />
                  <link rel="icon" href="/favicon.ico" />
                </Head>

                <div className="flex h-screen w-full items-center justify-center">
                    <h1 className="text-7xl font-medium text-center text-red-700 animate-bounce">W</h1>                
                </div>
            </>
        )
    }

    return (
        <Layout title={`${movieDetailData.title} | Watchlist`}>
            <main>
                <DetailOverview detailData={movieDetailData} detailMovie />      
                <DetailVideos videoData={movieVideoData}/>  
                <DetailCast castData={movieCreditData}/>  
                <MoreDetail detailData={movieDetailData} movie />     
                <DetailSimilar similarData={movieSimilarData} movie />         
            </main>
        </Layout>
    )
}

export const getStaticPaths = async () => {
    const movieInTheaterRes = await fetch(`https://api.themoviedb.org/3/movie/now_playing?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const movieInTheater = await movieInTheaterRes.json()

    const movieTrendingRes = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${process.env.API_KEY}`)
    const movieTrending = await movieTrendingRes.json()

    const moviePopularRes = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const moviePopular = await moviePopularRes.json()

    const actionDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=28&with_watch_monetization_types=flatrate`)
    const actionData = await actionDataRes.json()

    const comedyDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=35&with_watch_monetization_types=flatrate`)
    const comedyData = await comedyDataRes.json()

    const horrorDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=27&with_watch_monetization_types=flatrate`)
    const horrorData = await horrorDataRes.json()

    const romanceDataRes = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=10749&with_watch_monetization_types=flatrate`)
    const romanceData = await romanceDataRes.json()

    const data = [
        ...movieInTheater.results,
        ...movieTrending.results,
        ...moviePopular.results,
        ...actionData.results,
        ...comedyData.results,
        ...horrorData.results,
        ...romanceData.results
    ]

    const paths = data.map( items => {
        return {
            params: {
                id: items.id.toString()
            }
        }
    })

    return {
        paths,
        fallback: true
    }
}

export const getStaticProps = async (paths) => {
    const id = paths.params.id

    const movieDetailDataRes = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.API_KEY}&language=en-US`)
    const movieDetailData = await movieDetailDataRes.json()

    const movieVideoRes = await fetch(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.API_KEY}&language=en-US`)
    const movieVideoData = await movieVideoRes.json()
    const filteredMovieVideoData = await movieVideoData.results.filter( items => {
        return items.site === "YouTube"
    })

    const movieCreditRes = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${process.env.API_KEY}&language=en-US`)
    const movieCreditData = await movieCreditRes.json()
    const filteredMovieCreditData = await movieCreditData.cast.filter( items => {
        return items.known_for_department === "Acting" && items.profile_path !== null
    })

    const movieSimilarRes = await fetch(`https://api.themoviedb.org/3/movie/${id}/similar?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const movieSimilarData = await movieSimilarRes.json()
    const filteredMovieSimilarData = await movieSimilarData.results.filter( items => {
        return items.backdrop_path !== null && items.poster_path !== null
    })

    const movieRecomendationRes = await fetch(`https://api.themoviedb.org/3/movie/${id}/recommendations?api_key=${process.env.API_KEY}&language=en-US&page=1`)
    const movieRecomendationData = await movieRecomendationRes.json()
    const filteredMovieRecomendationData = await movieRecomendationData.results.filter( items => {
        return items.backdrop_path !== null && items.poster_path !== null
    })

    const similarAndRecomendationData = [
        ...filteredMovieRecomendationData,
        ...filteredMovieSimilarData
    ]
    
    return {
        props: {
            movieDetailData: movieDetailData,
            movieVideoData: filteredMovieVideoData,
            movieCreditData: filteredMovieCreditData,
            movieSimilarData: similarAndRecomendationData            
        },
        revalidate: 1
    }
}
